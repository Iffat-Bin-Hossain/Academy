package com.example.demo.service;

import com.example.demo.model.*;
import com.example.demo.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class ResourceService {
    
    private final ResourceRepository resourceRepository;
    private final CourseRepository courseRepository;
    private final UserRepository userRepository;
    private final NotificationService notificationService;

    @Value("${file.upload-dir:uploads}")
    private String UPLOAD_DIR;

    /**
     * Get all resources for a course
     */
    public List<ResourceResponse> getResourcesByCourse(Long courseId, Long userId) {
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new RuntimeException("Course not found"));
        
        List<Resource> resources = resourceRepository.findByCourseAndIsActiveTrueOrderByCreatedAtDesc(course);
        return resources.stream()
                .map(this::convertToResourceResponse)
                .collect(Collectors.toList());
    }

    /**
     * Create a new resource
     */
    @Transactional
    public ResourceResponse createResource(ResourceCreateRequest request, MultipartFile file, Long teacherId) {
        log.info("Creating resource for course: {}", request.getCourseId());
        
        Course course = courseRepository.findById(request.getCourseId())
                .orElseThrow(() -> new RuntimeException("Course not found"));

        User teacher = userRepository.findById(teacherId)
                .orElseThrow(() -> new RuntimeException("Teacher not found"));

        // Verify the teacher owns this course
        if (!course.getAssignedTeacher().getId().equals(teacherId)) {
            throw new RuntimeException("Unauthorized: You don't have permission to add resources to this course");
        }

        Resource resource = new Resource();
        resource.setCourse(course);
        resource.setUploadedBy(teacher);
        resource.setTitle(request.getTitle());
        resource.setDescription(request.getDescription());
        resource.setResourceType(request.getResourceType());
        resource.setTopic(request.getTopic());
        resource.setWeek(request.getWeek());
        resource.setTags(request.getTags());
        resource.setIsVisible(request.getIsVisible() != null ? request.getIsVisible() : true);
        resource.setIsActive(true);
        resource.setCreatedAt(LocalDateTime.now());
        resource.setUpdatedAt(LocalDateTime.now());

        // Handle different resource types
        switch (request.getResourceType()) {
            case FILE:
                if (file != null && !file.isEmpty()) {
                    String fileName = saveFile(file);
                    resource.setStoredFilename(fileName);
                    resource.setOriginalFilename(file.getOriginalFilename());
                    resource.setFileSize(file.getSize());
                    resource.setContentType(file.getContentType());
                } else {
                    throw new RuntimeException("File is required for FILE type resources");
                }
                break;
            case LINK:
                resource.setUrl(request.getResourceUrl());
                break;
            case NOTE:
                resource.setNoteContent(request.getTextContent());
                break;
        }

        Resource savedResource = resourceRepository.save(resource);
        
        // Send notification about new resource
        notificationService.sendResourceCreatedNotification(course, savedResource, teacherId);
        
        log.info("Successfully created resource: {}", savedResource.getId());
        return convertToResourceResponse(savedResource);
    }

    /**
     * Update a resource
     */
    @Transactional
    public ResourceResponse updateResource(Long resourceId, ResourceUpdateRequest request, Long teacherId) {
        log.info("Updating resource: {}", resourceId);
        
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        // Verify the teacher owns this course
        if (!resource.getCourse().getAssignedTeacher().getId().equals(teacherId)) {
            throw new RuntimeException("Unauthorized: You don't have permission to update this resource");
        }

        // Update basic fields
        resource.setTitle(request.getTitle());
        resource.setDescription(request.getDescription());
        resource.setTopic(request.getTopic());
        resource.setWeek(request.getWeek());
        resource.setTags(request.getTags());
        resource.setIsVisible(request.getIsVisible() != null ? request.getIsVisible() : resource.getIsVisible());
        resource.setUpdatedAt(LocalDateTime.now());

        // Update type-specific fields if they exist in request
        if (request.getUrl() != null) {
            resource.setUrl(request.getUrl());
        }
        if (request.getNoteContent() != null) {
            resource.setNoteContent(request.getNoteContent());
        }

        Resource updatedResource = resourceRepository.save(resource);

        // Send notification about resource update
        notificationService.sendResourceUpdatedNotification(updatedResource.getCourse(), updatedResource, teacherId);

        log.info("Successfully updated resource: {}", resourceId);
        return convertToResourceResponse(updatedResource);
    }

    /**
     * Update resource with file replacement
     */
    @Transactional
    public ResourceResponse updateResourceWithFile(Long resourceId, ResourceUpdateRequest request, MultipartFile file, Long teacherId) {
        log.info("Updating resource with file. Resource ID: {}, Teacher ID: {}", resourceId, teacherId);
        
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        // Verify the teacher owns this course
        if (!resource.getCourse().getAssignedTeacher().getId().equals(teacherId)) {
            throw new RuntimeException("Unauthorized: You don't have permission to update this resource");
        }

        // Update basic fields
        resource.setTitle(request.getTitle());
        resource.setDescription(request.getDescription());
        resource.setTopic(request.getTopic());
        resource.setWeek(request.getWeek());
        resource.setTags(request.getTags());
        resource.setIsVisible(request.getIsVisible() != null ? request.getIsVisible() : resource.getIsVisible());
        resource.setUpdatedAt(LocalDateTime.now());

        // Handle resource type change if requested
        if (request.getResourceType() != null && !request.getResourceType().equals(resource.getResourceType())) {
            // If changing from FILE type, delete the old file
            if (resource.getResourceType() == Resource.ResourceType.FILE && resource.getStoredFilename() != null) {
                deleteOldFile(resource.getStoredFilename());
            }

            // Clear old type-specific fields
            resource.setStoredFilename(null);
            resource.setOriginalFilename(null);
            resource.setFileSize(null);
            resource.setContentType(null);
            resource.setUrl(null);
            resource.setNoteContent(null);

            // Set new type
            resource.setResourceType(request.getResourceType());
        }

        // Handle the new file or resource type specific content
        switch (resource.getResourceType()) {
            case FILE:
                if (file != null && !file.isEmpty()) {
                    // Delete old file if exists
                    if (resource.getStoredFilename() != null) {
                        deleteOldFile(resource.getStoredFilename());
                    }

                    // Save new file
                    String fileName = saveFile(file);
                    resource.setStoredFilename(fileName);
                    resource.setOriginalFilename(file.getOriginalFilename());
                    resource.setFileSize(file.getSize());
                    resource.setContentType(file.getContentType());
                } else if (request.getResourceTypeChanged() != null && request.getResourceTypeChanged()) {
                    throw new RuntimeException("File is required when changing to FILE type");
                }
                break;
            case LINK:
                resource.setUrl(request.getUrl());
                break;
            case NOTE:
                resource.setNoteContent(request.getNoteContent());
                break;
        }

        Resource updatedResource = resourceRepository.save(resource);

        // Send notification about resource update
        notificationService.sendResourceUpdatedNotification(updatedResource.getCourse(), updatedResource, teacherId);

        log.info("Successfully updated resource with file. Resource ID: {}", resourceId);
        return convertToResourceResponse(updatedResource);
    }

    /**
     * Update resource with type change support
     */
    @Transactional
    public ResourceResponse updateResourceWithTypeChange(Long resourceId, ResourceUpdateRequest request, Long teacherId) {
        log.info("Updating resource with type change. Resource ID: {}, Teacher ID: {}", resourceId, teacherId);
        
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        // Verify the teacher owns this course
        if (!resource.getCourse().getAssignedTeacher().getId().equals(teacherId)) {
            throw new RuntimeException("Unauthorized: You don't have permission to update this resource");
        }

        // Handle type changes that require special cleanup
        Resource.ResourceType oldType = resource.getResourceType();
        Resource.ResourceType newType = request.getResourceType();
        
        if (oldType != newType) {
            // If changing from FILE type, delete the old file
            if (oldType == Resource.ResourceType.FILE && resource.getStoredFilename() != null) {
                try {
                    String fullPath = UPLOAD_DIR + "/" + resource.getStoredFilename();
                    Path filePath = Paths.get(fullPath);
                    if (Files.exists(filePath)) {
                        Files.delete(filePath);
                        log.info("Deleted old file: {}", fullPath);
                    }
                } catch (IOException e) {
                    log.warn("Failed to delete old file: {}", e.getMessage());
                }
            }

            // Clear type-specific fields when changing types
            if (newType != Resource.ResourceType.FILE) {
                resource.setStoredFilename(null);
                resource.setOriginalFilename(null);
                resource.setFileSize(null);
                resource.setContentType(null);
            }
            if (newType != Resource.ResourceType.LINK) {
                resource.setUrl(null);
            }
            if (newType != Resource.ResourceType.NOTE) {
                resource.setNoteContent(null);
            }
        }

        // Update basic fields
        resource.setTitle(request.getTitle());
        resource.setDescription(request.getDescription());
        resource.setResourceType(newType);

        // Update type-specific fields based on new type
        switch (newType) {
            case LINK:
                resource.setUrl(request.getUrl());
                break;
            case NOTE:
                resource.setNoteContent(request.getNoteContent());
                break;
            case FILE:
                // For FILE type changes without file replacement, keep existing file or clear if none
                if (oldType != Resource.ResourceType.FILE) {
                    // Changing TO file type but no file provided - this should be handled by the file endpoint
                    throw new RuntimeException("File is required when changing to FILE type");
                }
                break;
        }

        resource.setUpdatedAt(LocalDateTime.now());
        Resource updatedResource = resourceRepository.save(resource);

        // Send notification about resource update
        notificationService.sendResourceUpdatedNotification(updatedResource.getCourse(), updatedResource, teacherId);

        log.info("Successfully updated resource with type change. Resource ID: {}", resourceId);
        return convertToResourceResponse(updatedResource);
    }

    /**
     * Delete a resource
     */
    @Transactional
    public void deleteResource(Long resourceId, Long teacherId) {
        log.info("Deleting resource: {}", resourceId);
        
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        // Verify the teacher owns this course
        if (!resource.getCourse().getAssignedTeacher().getId().equals(teacherId)) {
            throw new RuntimeException("Unauthorized: You don't have permission to delete this resource");
        }

        // Delete associated file if it exists
        if (resource.getResourceType() == Resource.ResourceType.FILE && resource.getStoredFilename() != null) {
            deleteOldFile(resource.getStoredFilename());
        }

        // Soft delete by marking as inactive
        resource.setIsActive(false);
        resource.setUpdatedAt(LocalDateTime.now());
        
        resourceRepository.save(resource);
        log.info("Successfully deleted resource: {}", resourceId);
    }

    /**
     * Get a specific resource by ID
     */
    public ResourceResponse getResourceById(Long resourceId, Long userId) {
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        if (!resource.getIsActive()) {
            throw new RuntimeException("Resource not found");
        }

        return convertToResourceResponse(resource);
    }

    private String saveFile(MultipartFile file) {
        try {
            // Create uploads directory if it doesn't exist
            Path uploadPath = Paths.get(UPLOAD_DIR);
            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }

            // Generate unique filename
            String originalFilename = file.getOriginalFilename();
            String extension = "";
            if (originalFilename != null && originalFilename.contains(".")) {
                extension = originalFilename.substring(originalFilename.lastIndexOf("."));
            }
            String uniqueFilename = UUID.randomUUID().toString() + extension;

            // Save file
            Path filePath = uploadPath.resolve(uniqueFilename);
            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

            log.info("File saved successfully: {}", uniqueFilename);
            return uniqueFilename;

        } catch (IOException e) {
            log.error("Error saving file: {}", e.getMessage());
            throw new RuntimeException("Could not save file: " + e.getMessage());
        }
    }

    private void deleteOldFile(String fileName) {
        try {
            Path filePath = Paths.get(UPLOAD_DIR, fileName);
            if (Files.exists(filePath)) {
                Files.delete(filePath);
                log.info("Deleted old file: {}", fileName);
            }
        } catch (IOException e) {
            log.warn("Could not delete old file {}: {}", fileName, e.getMessage());
        }
    }

    private ResourceResponse convertToResourceResponse(Resource resource) {
        ResourceResponse response = new ResourceResponse();
        response.setId(resource.getId());
        response.setCourseId(resource.getCourse().getId());
        response.setTitle(resource.getTitle());
        response.setDescription(resource.getDescription());
        response.setResourceType(resource.getResourceType());
        response.setTopic(resource.getTopic());
        response.setWeek(resource.getWeek());
        response.setTags(resource.getTags());
        response.setIsVisible(resource.getIsVisible());
        response.setIsActive(resource.getIsActive());
        response.setCreatedAt(resource.getCreatedAt());
        response.setUpdatedAt(resource.getUpdatedAt());

        // Set type-specific fields
        if (resource.getResourceType() == Resource.ResourceType.FILE) {
            response.setFileName(resource.getStoredFilename());
            response.setFilePath(resource.getStoredFilename());
            response.setOriginalFilename(resource.getOriginalFilename());
            response.setFileSize(resource.getFileSize());
        } else if (resource.getResourceType() == Resource.ResourceType.LINK) {
            response.setResourceUrl(resource.getUrl());
        } else if (resource.getResourceType() == Resource.ResourceType.NOTE) {
            response.setTextContent(resource.getNoteContent());
        }

        return response;
    }

    /**
     * Get download URL for file resources
     */
    public Map<String, Object> getFileDownloadInfo(Long resourceId, Long userId) {
        Resource resource = resourceRepository.findById(resourceId)
                .orElseThrow(() -> new RuntimeException("Resource not found"));

        if (resource.getResourceType() != Resource.ResourceType.FILE) {
            throw new RuntimeException("Resource is not a file");
        }

        if (!resource.getIsActive() || !resource.getIsVisible()) {
            throw new RuntimeException("Resource not available");
        }

        Map<String, Object> fileInfo = new HashMap<>();
        fileInfo.put("fileName", resource.getOriginalFilename());
        fileInfo.put("filePath", resource.getStoredFilename());
        fileInfo.put("fileSize", resource.getFileSize());
        
        return fileInfo;
    }
}
